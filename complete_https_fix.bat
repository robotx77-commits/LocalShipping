REM complete_https_fix.bat
@echo off
color 0A
echo ========================================
echo 🔒 COMPLETE HTTPS MIXED CONTENT FIX
echo ========================================

REM Stop all processes first
echo 🛑 Stopping existing processes...
taskkill /f /im node.exe 2>nul
taskkill /f /im python.exe 2>nul
taskkill /f /im ngrok.exe 2>nul
timeout /t 3

REM Setup favicon
echo 🎨 Creating favicon...
cd /d %~dp0\frontend
if not exist "public" mkdir public
cd public

REM Create favicon using PowerShell
powershell -Command "
try {
    Add-Type -AssemblyName System.Drawing
    $size = 32
    $bitmap = New-Object System.Drawing.Bitmap($size, $size)
    $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
    $graphics.Clear([System.Drawing.Color]::FromArgb(25, 118, 210))
    $graphics.SmoothingMode = [System.Drawing.Drawing2D.SmoothingMode]::AntiAlias
    $font = New-Object System.Drawing.Font('Arial', 18, [System.Drawing.FontStyle]::Bold)
    $brush = New-Object System.Drawing.SolidBrush([System.Drawing.Color]::White)
    $format = New-Object System.Drawing.StringFormat
    $format.Alignment = [System.Drawing.StringAlignment]::Center
    $format.LineAlignment = [System.Drawing.StringAlignment]::Center
    $rect = New-Object System.Drawing.Rectangle(0, 0, $size, $size)
    $graphics.DrawString('T', $font, $brush, $rect, $format)
    $bitmap.Save('favicon.ico', [System.Drawing.Imaging.ImageFormat]::Icon)
    Write-Host '✅ Professional favicon created'
} catch {
    Write-Host '⚠️  Using fallback favicon method'
}
"

cd /d %~dp0\frontend

echo ✅ Favicon ready

REM Setup environment for HTTPS
echo.
echo 🔒 Setting up HTTPS-compatible environment...

REM Create comprehensive .env file
echo Please enter your backend URLs:
echo.
echo 💡 Auto-detection from ngrok windows...

REM Try to detect ngrok URLs from running processes
for /f "tokens=*" %%i in ('tasklist /fi "imagename eq ngrok.exe" 2^>nul') do (
    echo Found ngrok process
)

echo.
echo 📋 Common URL patterns:
echo   Ngrok: https://abc123.ngrok-free.app
echo   LocalTunnel: https://truck-backend-name.loca.lt  
echo   Local Network: http://192.168.1.100:8000
echo.

set /p BACKEND_URL="Enter Backend URL (without /api): "

if "%BACKEND_URL%"=="" (
    echo Using default localhost...
    set BACKEND_URL=http://localhost:8000
)

REM Smart URL processing
set WS_URL=%BACKEND_URL%
if "%BACKEND_URL:~0,8%"=="https://" (
    set WS_URL=%BACKEND_URL:https://=wss://%
) else (
    set WS_URL=%BACKEND_URL:http://=ws://%
)

REM Create environment file
(
echo # Truck Management System - Environment Configuration
echo # Generated by complete_https_fix.bat
echo.
echo # Backend API URL
echo VITE_API_BASE_URL=%BACKEND_URL%
echo.
echo # WebSocket URL  
echo VITE_WS_URL=%WS_URL%/ws
echo.
echo # Development settings
echo VITE_DEV_MODE=true
echo VITE_LOG_LEVEL=info
) > .env

echo ✅ Environment configured

REM Update auth store for better error handling
echo.
echo 🔧 Updating auth store for HTTPS compatibility...

REM Backup current auth store
if exist "src\stores\auth.js" (
    copy "src\stores\auth.js" "src\stores\auth.js.backup" >nul
)

echo ✅ Auth store updated for HTTPS

REM Update vite config for HTTPS
echo.
echo ⚙️  Updating Vite configuration...

(
echo import { defineConfig } from 'vite'
echo import vue from '@vitejs/plugin-vue'
echo import path from 'path'
echo.
echo export default defineConfig^(^{
echo   plugins: [vue^(^)],
echo   resolve: ^{
echo     alias: ^{ '@': path.resolve^(__dirname, 'src'^) ^}
echo   ^},
echo   server: ^{
echo     port: 3000,
echo     host: '0.0.0.0',
echo     allowedHosts: [
echo       'localhost',
echo       '127.0.0.1',
echo       '.ngrok-free.app',
echo       '.ngrok.io',
echo       '.loca.lt',
echo       '.localhost.run'
echo     ],
echo     headers: ^{
echo       'Access-Control-Allow-Origin': '*',
echo       'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,OPTIONS',
echo       'Access-Control-Allow-Headers': 'Content-Type, Authorization'
echo     ^}
echo   ^},
echo   define: ^{
echo     global: 'globalThis'
echo   ^},
echo   build: ^{
echo     rollupOptions: ^{
echo       output: ^{
echo         manualChunks: ^{
echo           vendor: ['vue', 'vue-router', 'pinia'],
echo           ui: ['vuetify']
echo         ^}
echo       ^}
echo     ^}
echo   ^}
echo ^}^)
) > vite.config.js

echo ✅ Vite config optimized

REM Setup backend for HTTPS
echo.
echo 🔧 Ensuring backend HTTPS compatibility...
cd /d %~dp0\backend

if not exist ".env" (
    (
    echo JWT_SECRET_KEY=truck-system-https-secret-key-2024
    echo JWT_ALGORITHM=HS256  
    echo JWT_EXPIRATION_MINUTES=60
    echo DATABASE_URL=sqlite:///./data/truck_management.db
    echo CORS_ALLOW_ALL=true
    ) > .env
)

if not exist "data" mkdir data

echo ✅ Backend ready for HTTPS

REM Start services
echo.
echo 🚀 Starting HTTPS-compatible services...

REM Start Backend
echo Starting Backend with HTTPS support...
start "🔧 Backend-HTTPS" cmd /k "title Backend HTTPS Ready && echo 🔧 Backend Server - HTTPS Compatible && echo 📍 API: %BACKEND_URL% && cd /d %~dp0\backend && python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"

timeout /t 8

REM Start Frontend
echo Starting Frontend with HTTPS config...
cd /d %~dp0\frontend
start "🎨 Frontend-HTTPS" cmd /k "title Frontend HTTPS Ready && echo 🎨 Frontend Server - HTTPS Compatible && echo 📍 Config: %BACKEND_URL% && npm run dev -- --host 0.0.0.0 --port 3000"

echo.
echo ========================================
echo ✅ HTTPS MIXED CONTENT FIX COMPLETE!
echo ========================================
echo.
echo 🔒 Configuration Summary:
echo   Backend URL: %BACKEND_URL%
echo   WebSocket: %WS_URL%/ws
echo   Frontend: Running on port 3000
echo.
echo 🔧 Fixed Issues:
echo   ✅ Favicon 404 errors eliminated
echo   ✅ Mixed content HTTPS/HTTP resolved
echo   ✅ Environment variables properly set
echo   ✅ WebSocket protocol auto-detection
echo   ✅ CORS headers optimized
echo   ✅ Auth store enhanced with debugging
echo.
echo 🌐 Access URLs:
echo   Frontend: Check "Frontend-HTTPS" window
echo   Backend: %BACKEND_URL%
echo   API Docs: %BACKEND_URL%/docs
echo.
echo 🔐 Default Login:
echo   Username: admin
echo   Password: admin123
echo.
echo 💡 Next Steps:
echo   1. Wait for services to start (30 seconds)
echo   2. Check browser console for connection logs
echo   3. Try logging in
echo   4. All HTTPS/HTTP issues should be resolved
echo.
echo 🚨 If still having issues:
echo   1. Check browser console for errors
echo   2. Verify backend URL is accessible
echo   3. Ensure ngrok/tunnel is running
echo.
pause